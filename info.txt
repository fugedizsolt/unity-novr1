20210101:
	- a forgatásokat már sikerült eltolni a hmd-be, azaz, ha külön-külön x,y,z tengely körül forgatok (azaz csak az egyik forgatási szög változik), akkor szép a forgatás
	- DE ha z tengelyen el vagyok fordulva kb 10-80 fokos szögben bárhol, és elkezdek forogni az x tengely körül, akkor elmászik a kocka...
		- DE ha teljes fordulatot végzek, akkor visszamászik! azaz valami gimbal-lock féle hiba lehet a forgatásoknál
	- ezt talán úgy tudom kisimítani, hogy külön számolom a nem-hmd-ben jól működő forgást és a hdm akkori pozíciójához igazítom a forgást
	- hihetetlen, de készen van úgy tűnik
		- a gimbal-lock hatás még megvan, de talán nem annyira zavaró
	- a local-space <-> world-space konverzió volt a kulcs, de ezt még rohadtul nem értem...
	- VR-ban valamiért még nem jó a prg
	- átalakítottam úgy, hogy a chaperone-hoz teszem a script-et és kezdeti quaternion-t is kezelek

20200103:
	- unity quaternion (nem tudom, ez menniyre jó...):
		- https://github.com/Unity-Technologies/Unity.Mathematics/blob/master/src/Unity.Mathematics/quaternion.cs
	- a gyorsulás számolás kicsit eltér
		- a rotációhoz van egy float "sebesség" értékem, amit "Lerp" fgv-vel mondok meg
		- a transzlációhoz van egy vektor értékem (a rotáció irányában x,y,z tengely mentén), melyet float "sebesség" értékkel módosíthatok
	- ebből azt tudom kitalálni, hogy
		- nyilvántartok egy quaternion-t az aktuális forgatásra, amelyet módosítok az aktuális forgatással egy adott sebességgel
			- a cél az, hogy egy adott szögsebességnél ne tudjunk gyorsabban fordulni
		- nyilvántartok egy vektort az aktuális transzlációra, amelyet módosítok az aktuális transzlációval egy adott sebességgel
	- InverseTransformPoint fgv ezt számolja : Quaternion.Inverse( transform.rotation ) * ( worldCoordPos - transform.position )
		- ebben nincs scale
